{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notification-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BaseNotification = _resolveComponent(\"BaseNotification\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.notifications, notification => {\n    return _openBlock(), _createBlock(_component_BaseNotification, {\n      key: notification.id,\n      type: notification.type,\n      message: notification.message,\n      onDismiss: $event => $setup.removeNotification(notification.id)\n    }, null, 8 /* PROPS */, [\"type\", \"message\", \"onDismiss\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","notifications","notification","_createBlock","_component_BaseNotification","key","id","type","message","onDismiss","$event","removeNotification"],"sources":["C:\\Users\\Henry\\Desktop\\GreenlogistApps-main\\GreenlogistApps-main\\src\\components\\NotificationContainer.vue"],"sourcesContent":["<template>\n  <div class=\"notification-container\">\n    <BaseNotification\n      v-for=\"notification in notifications\"\n      :key=\"notification.id\"\n      :type=\"notification.type\"\n      :message=\"notification.message\"\n      @dismiss=\"removeNotification(notification.id)\"\n    />\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport BaseNotification from './BaseNotification.vue'\n\nexport default {\n  name: 'NotificationContainer',\n  components: {\n    BaseNotification\n  },\n  setup() {\n    const notifications = ref([])\n\n    const addNotification = (type, message) => {\n      const id = Date.now()\n      notifications.value.push({ id, type, message })\n      \n      setTimeout(() => {\n        removeNotification(id)\n      }, 5000)\n    }\n\n    const removeNotification = (id) => {\n      notifications.value = notifications.value.filter(n => n.id !== id)\n    }\n\n    return {\n      notifications,\n      addNotification,\n      removeNotification\n    }\n  }\n}\n</script>\n\n<style scoped>\n.notification-container {\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAwB;;;uBAAnCC,mBAAA,CAQM,OARNC,UAQM,I,kBAPJD,mBAAA,CAMEE,SAAA,QARNC,WAAA,CAG6BC,MAAA,CAAAC,aAAa,EAA7BC,YAAY;yBADrBC,YAAA,CAMEC,2BAAA;MAJCC,GAAG,EAAEH,YAAY,CAACI,EAAE;MACpBC,IAAI,EAAEL,YAAY,CAACK,IAAI;MACvBC,OAAO,EAAEN,YAAY,CAACM,OAAO;MAC7BC,SAAO,EAAAC,MAAA,IAAEV,MAAA,CAAAW,kBAAkB,CAACT,YAAY,CAACI,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}